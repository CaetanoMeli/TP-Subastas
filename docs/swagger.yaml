swagger: "2.0"
info:
  description: "Manage auctions and user accounts."
  version: "0.0.1"
  title: "Auction API"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost:8080"
basePath: "/v1"
tags:
- name: "user"
  description: "Operations about user"
- name: "auction"
  description: "Auction related operations"
schemes:
- "https"
- "http"
paths:
  /users:
    post:
      tags:
      - "user"
      summary: "Register user"
      description: "Registers a new user."
      operationId: "createUser"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/NewUser"
      responses:
        "201":
          description: "User created successfully"
        "400":
          description: "Email is invalid"
        "500":
          description: "Server Error"
  /users/validate:
    get:
      tags:
      - "user"
      summary: "Validate user email"
      description: "Validates if email exists."
      operationId: "validateEmail"
      produces:
      - "application/json"
      parameters:
      - name: "email"
        in: "query"
        description: "The user email for login"
        required: true
        type: "string"
      responses:
        "204":
          description: "Email is valid and exists"
        "404":
          description: "Email doesn't exist"
        "400":
          description: "Email is invalid"
        "500":
          description: "Server Error"
  /users/login:
    get:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResponse"
        "404":
          description: "Can't find user with provided name"
        "400":
          description: "Invalid username/password supplied"
        "500":
          description: "Server Error"
  /users/code:
    post:
      tags:
      - "user"
      summary: "Generate password with code"
      description: "Adds new password to user with sent code."
      operationId: "createUserPass"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "New user pass and code"
        required: true
        schema:
          $ref: "#/definitions/NewUserPass"
      responses:
        "201":
          description: "Password generated successfully"
        "400":
          description: "Email is invalid"
        "500":
          description: "Server Error"
  /users/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
        "500":
          description: "Server Error"
  /users/{id}:
    get:
      tags:
      - "user"
      summary: "Get user by user id"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The id of the user that needs to be fetched. "
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid user id supplied"
        "404":
          description: "User not found"
        "500":
          description: "Server Error"
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "id that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "400":
          description: "Invalid user supplied"
        "404":
          description: "User not found"
        "500":
          description: "Server Error"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The id of the user that needs to be deleted"
        required: true
        type: "string"
      responses:
        "204":
          description: "User deleted successfully"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
        "500":
          description: "Server Error"
  /users/{id}/bids:
    get:
      tags:
      - "user"
      summary: "Get user historic bids"
      description: ""
      operationId: "getUserBids"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The id of the user that needs to be fetched. "
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Bids"
        "400":
          description: "Invalid user id supplied"
        "404":
          description: "User not found"
        "500":
          description: "Server Error"
    put:
      tags:
      - "user"
      summary: "Add user bid"
      description: ""
      operationId: "addUserBid"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The id of the user that needs to be added a bid to. "
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Bid to add"
        required: true
        schema:
          $ref: "#/definitions/NewBid"
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Bids"
        "400":
          description: "Invalid user id supplied or invalid bid amount"
        "404":
          description: "User not found"
  /users/{id}/stats:
    get:
      tags:
      - "user"
      summary: "Get user statistics"
      description: ""
      operationId: "getUserStatistics"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The id of the user that needs to be fetched. "
        required: true
        type: "string"
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/UserStats"
        "400":
          description: "Invalid user id supplied"
        "404":
          description: "User not found"
        "500":
          description: "Server Error"
  /users/{id}/payment_methods:
    get:
      tags:
      - "user"
      summary: "Get user payment methods"
      description: ""
      operationId: "getUserPaymentMethods"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The id of the user that needs to be fetched. "
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/PaymentMethods"
        "400":
          description: "Invalid user id supplied"
        "404":
          description: "User not found"
        "500":
          description: "Server Error"
    put:
      tags:
      - "user"
      summary: "Update user payment methods"
      description: "This can only be done by the logged in user."
      operationId: "updateUserPaymentMethods"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "id that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "New payment method object"
        required: true
        schema:
          $ref: "#/definitions/PaymentMethod"
      responses:
        "201":
          description: "Payment method added"
        "400":
          description: "Invalid user supplied"
        "404":
          description: "User not found"
        "500":
          description: "Server Error"
    delete:
      tags:
      - "user"
      summary: "Delete user payment method"
      description: "This can only be done by the logged in user."
      operationId: "deleteUserPaymentMethod"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The id of the user that needs to be deleted"
        required: true
        type: "string"
      - name: "id"
        in: "query"
        description: "The id of the payment method that needs to be deleted"
        required: true
        type: "string"
      responses:
        "200":
          description: "Deleted payment method"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
        "500":
          description: "Server Error"
  /users/{id}/articles:
    get:
      tags:
      - "user"
      summary: "Get user published articles"
      description: ""
      operationId: "getUserArticles"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The id of the user that needs to be fetched. "
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid user id supplied"
        "404":
          description: "User not found"
        "500":
          description: "Server Error"
  /home:
    get:
      tags:
      - "auction"
      summary: "Returns Home content"
      description: "Returns Home content."
      operationId: "getHome"
      produces:
      - "application/json"
      parameters:
      - name: "user_id"
        in: "query"
        description: "The user id in case it is logged in"
        required: false
        type: "string"
      responses:
        "200":
          description: "Home content"
          schema:
            $ref: "#/definitions/Home"
        "500":
          description: "Internal Server Error"
  /auctions/{id}:
    get:
      tags:
      - "auction"
      summary: "Returns Auction content"
      description: "Returns Auction content."
      operationId: "getAuction"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The auction number"
        required: true
        type: "string"
      responses:
        "200":
          description: "Auction content"
          schema:
            $ref: "#/definitions/Auction"
        "404":
          description: "Unexisting Auction"
        "500":
          description: "Internal Server Error"
  /auctions/{id}/catalog:
    get:
      tags:
      - "auction"
      summary: "Returns Auction catalog content"
      description: "Returns Auction catalog content."
      operationId: "getAuctionCatalog"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The auction number"
        required: true
        type: "string"
      responses:
        "200":
          description: "Auction catalog content"
          schema:
            $ref: "#/definitions/AuctionCatalog"
        "500":
          description: "Internal Server Error"
definitions:
  NewUser:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      dni:
        type: "string"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      address:
        type: "string"
      phone:
        type: "string"
  Auction:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      title:
        type: "string"
      detail:
        type: "object"
        properties:
          startDate:
            type: "string"
          owner:
            type: "string"
          category:
            type: "string"
            enum: [comun, especial, plata, oro, platino]
          articleAmount:
            type: "integer"
            format: "int64"
          description:
            type: "string"
  AuctionCatalog:
    type: "object"
    properties:
      auction_id:
        type: "integer"
        format: "int64"
      articles:
        type: array
        items:
          type: object
          properties:
            title:
              type: "string"
            status:
              type: "string"
            canBid:
              type: "boolean"
            description:
              type: "string"
            owner:
              type: "string"
            basePrice:
              type: "string"
            pictures:
              type: object
              properties:
                url:
                  type: "string"
  Bids:
    type: "object"
    properties:
      user:
        type: object
        properties:
          name:
            type: "string"
          avatar:
            type: "string"
          category:
            type: "string"
            enum: [comun, especial, plata, oro, platino]
      bids:
        type: array
        items:
          type: object
          properties:
            date:
              type: "string"
            article:
              type: "string"
            amount:
              type: "integer"
              format: "int64"
            result:
              type: "string"
  NewBid:
    type: "object"
    properties:
      auction_id:
        type: "integer"
        format: "int64"
      article_id:
        type: "integer"
        format: "int64"
      amount:
        type: "integer"
        format: "int64"
  UserStats:
    type: "object"
    properties:
      user:
        type: object
        properties:
          name:
            type: "string"
          avatar:
            type: "string"
          category:
            type: "string"
            enum: [comun, especial, plata, oro, platino]
      bidResults:
        type: object
        properties:
            won:
              type: "integer"
              format: "int64"
              example: 5
            lost:
              type: "integer"
              format: "int64"
              example: 5
      categoryParticipation:
        type: array
        items:
          type: object
          properties:
            type:
              type: "string"
              enum: [comun, especial, plata, oro, platino]
            amount:
              type: "integer"
              format: "int64"
  PaymentMethods:
    type: "object"
    properties:
      paymentMethods:
        type: array
        items:
          type: object
          properties:
            id:
              type: "integer"
              format: "int64"
            type:
              type: "string"
              enum: [card, bank_account]
            name:
              type: "string"
              example: Tarjeta VISA
            bin:
              type: "string"
              example: xxxx xxxx xxxx 1234
            description:
              type: "string"
  PaymentMethod:
    type: "object"
    properties:
      type:
        type: "string"
        enum: [card, bank_account]
      name:
        type: "string"
        example: Tarjeta VISA
      bin:
        type: "string"
        example: 1234 1234 1234 1234
      description:
        type: "string"
  NewUserPass:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int64"
      password:
        type: "string"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      dni:
        type: "string"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      address:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
  Home:
    type: "object"
    properties:
      menu:
        type: array
        items:
          type: object
          properties:
            type:
              type: "string"
              example: home
            description:
              type: "string"
              example: Inicio
            icon:
              type: "string"
              example: home
      filters:
        type: array
        items:
          type: object
          properties:
            name:
              type: "string"
              example: Categorias
            types:
              type: array
              items:
                type: object
                properties:
                  name:
                    type: "string"
                    example: comun
      auctions:
        type: array
        items:
          type: object
          properties:
            number:
              type: "integer"
              format: "int32"
            title:
              type: "string"
            category:
              type: "string"
              enum: [comun, especial, plata, oro, platino]
            status:
              type: "string"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"