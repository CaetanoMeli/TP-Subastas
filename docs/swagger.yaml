swagger: "2.0"
info:
  description: "Manage auctions and user accounts."
  version: "0.0.1"
  title: "Auction API"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost:8080"
basePath: "/v1"
tags:
- name: "user"
  description: "Operations about user"
- name: "auction"
  description: "Auction related operations"
schemes:
- "https"
- "http"
paths:
  /user:
    post:
      tags:
      - "user"
      summary: "Register user"
      description: "Registers a new user."
      operationId: "createUser"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/NewUser"
      responses:
        default:
          description: "successful operation"
  /user/validate:
    get:
      tags:
      - "user"
      summary: "Validate user email"
      description: "Validates if email exists."
      operationId: "validateEmail"
      produces:
      - "application/json"
      parameters:
      - name: "email"
        in: "query"
        description: "The user email for login"
        required: true
        type: "string"
      responses:
        "204":
          description: "Email is valid and exists"
        "404":
          description: "Email doesn't exist"
        "400":
          description: "Email is invalid"
  /user/login:
    get:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResponse"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        "400":
          description: "Invalid username/password supplied"
  /user/code:
    post:
      tags:
      - "user"
      summary: "Generate password with code"
      description: "Adds new password to user with sent code."
      operationId: "createUserPass"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "New user pass and code"
        required: true
        schema:
          $ref: "#/definitions/NewUserPass"
      responses:
        default:
          description: "successful operation"
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /user/{id}:
    get:
      tags:
      - "user"
      summary: "Get user by user id"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The id of the user that needs to be fetched. "
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid user id supplied"
        "404":
          description: "User not found"
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "id that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "400":
          description: "Invalid user supplied"
        "404":
          description: "User not found"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The id of the user that needs to be deleted"
        required: true
        type: "string"
      responses:
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
  /home:
    get:
      tags:
      - "auction"
      summary: "Returns Home content"
      description: "Returns Home content."
      operationId: "getHome"
      produces:
      - "application/json"
      parameters:
      - name: "user_id"
        in: "query"
        description: "The user id in case it is logged in"
        required: false
        type: "string"
      responses:
        "200":
          description: "Home content"
          schema:
            $ref: "#/definitions/Home"
        "500":
          description: "Internal Server Error"
definitions:
  NewUser:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      dni:
        type: "string"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      address:
        type: "string"
      phone:
        type: "string"
  NewUserPass:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int64"
      password:
        type: "string"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      dni:
        type: "string"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      address:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
  Home:
    type: "object"
    properties:
      menu:
        type: array
        items:
          type: object
          properties:
            type:
              type: "string"
              example: home
            description:
              type: "string"
              example: Inicio
            icon:
              type: "string"
              example: home
      filters:
        type: array
        items:
          type: object
          properties:
            name:
              type: "string"
              example: Categorias
            types:
              type: array
              items:
                type: object
                properties:
                  name:
                    type: "string"
                    example: comun
      auctions:
        type: array
        items:
          type: object
          properties:
            number:
              type: "integer"
              format: "int32"
            title:
              type: "string"
            category:
              type: "string"
              enum: [comun, especial, plata, oro, platino]
            status:
              type: "string"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"